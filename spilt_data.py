import os
import shutil
import random
from pathlib import Path

def split_data_with_labels(images_folder, labels_folder, output_folder, train_ratio=0.6, val_ratio=0.4, 
                          image_extensions=None, label_extensions=None, seed=42):
    """
    ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå label ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô train ‡πÅ‡∏•‡∏∞ val
    ‡∏ß‡∏≤‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏•‡∏∞ label ‡πÅ‡∏¢‡∏Å‡∏Å‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå images/... ‡πÅ‡∏•‡∏∞ labels/...
    """
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô
    if abs(train_ratio + val_ratio - 1.0) > 1e-6:
        raise ValueError("‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô train + val ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 1.0")
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    if image_extensions is None:
        image_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.webp']
    if label_extensions is None:
        label_extensions = ['.txt', '.xml', '.json', '.csv']
    
    random.seed(seed)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏≤‡∏ò
    images_path = Path(images_folder)
    labels_path = Path(labels_folder)
    output_path = Path(output_folder)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (‡πÅ‡∏¢‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏•‡∏∞ labels)
    images_train_path = output_path / "images" / "train"
    images_val_path = output_path / "images" / "val"
    labels_train_path = output_path / "labels" / "train"
    labels_val_path = output_path / "labels" / "val"
    
    for p in (images_train_path, images_val_path, labels_train_path, labels_val_path):
        p.mkdir(parents=True, exist_ok=True)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á
    if not images_path.exists():
        raise FileNotFoundError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {images_folder}")
    if not labels_path.exists():
        raise FileNotFoundError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå labels: {labels_folder}")
    
    print(f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å:")
    print(f"  ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {images_folder}")
    print(f"  Labels: {labels_folder}")
    print(f"‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô - Train: {train_ratio*100:.1f}%, Val: {val_ratio*100:.1f}%")
    
    # ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ñ‡∏π‡πà‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    matched_pairs = []
    
    # ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    image_files = {}
    for img_file in images_path.iterdir():
        if img_file.is_file() and img_file.suffix.lower() in image_extensions:
            base_name = img_file.stem  # ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏°‡∏µ extension
            image_files[base_name] = img_file
    
    print(f"\n‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(image_files)} ‡πÑ‡∏ü‡∏•‡πå")
    
    # ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå label ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    for label_file in labels_path.iterdir():
        if label_file.is_file() and label_file.suffix.lower() in label_extensions:
            base_name = label_file.stem
            if base_name in image_files:
                matched_pairs.append({
                    'image': image_files[base_name],
                    'label': label_file,
                    'base_name': base_name
                })
    
    total_pairs = len(matched_pairs)
    print(f"‡∏û‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô: {total_pairs} ‡∏Ñ‡∏π‡πà")
    
    if total_pairs == 0:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô!")
        return
    
    # ‡∏™‡∏∏‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
    random.shuffle(matched_pairs)
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏ü‡∏•‡πå
    train_count = int(total_pairs * train_ratio)
    val_count = total_pairs - train_count
    
    print(f"\n‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
    print(f"  Train: {train_count} ‡∏Ñ‡∏π‡πà (‡∏£‡∏π‡∏õ + label)")
    print(f"  Val: {val_count} ‡∏Ñ‡∏π‡πà (‡∏£‡∏π‡∏õ + label)")
    
    # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå train (‡∏ß‡∏≤‡∏á‡πÅ‡∏¢‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå)
    print("\nüöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å Train set...")
    for i, pair in enumerate(matched_pairs[:train_count]):
        shutil.copy2(pair['image'], images_train_path / pair['image'].name)
        shutil.copy2(pair['label'], labels_train_path / pair['label'].name)
        
        if (i + 1) % 100 == 0:
            print(f"  ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß: {i + 1}/{train_count} ‡∏Ñ‡∏π‡πà")
    
    # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå val (‡∏ß‡∏≤‡∏á‡πÅ‡∏¢‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå)
    print("\nüöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å Val set...")
    for i, pair in enumerate(matched_pairs[train_count:]):
        shutil.copy2(pair['image'], images_val_path / pair['image'].name)
        shutil.copy2(pair['label'], labels_val_path / pair['label'].name)
        
        if (i + 1) % 100 == 0:
            print(f"  ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß: {i + 1}/{val_count} ‡∏Ñ‡∏π‡πà")
    
    print(f"\n‚úÖ ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    print(f"‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏µ‡πà: {output_folder}")
    print(f"\n‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå:")
    print(f"  {output_folder}\\images\\train/ - {train_count} ‡∏£‡∏π‡∏õ")
    print(f"  {output_folder}\\images\\val/   - {val_count} ‡∏£‡∏π‡∏õ")
    print(f"  {output_folder}\\labels\\train/ - {train_count} labels")
    print(f"  {output_folder}\\labels\\val/   - {val_count} labels")

# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
if __name__ == "__main__":
    
    # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å images_All ‡πÅ‡∏•‡∏∞ labels_All
    images_folder = r"C:\skin_project\herbSkin_Project66\new\images"
    labels_folder = r"C:\skin_project\herbSkin_Project66\new\label" 
    output_folder = r"C:\skin_project\herbSkin_Project66\new\dataset"
    
    print("=== ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û + Labels ===")
    split_data_with_labels(
        images_folder=images_folder,
        labels_folder=labels_folder,
        output_folder=output_folder,
        train_ratio=0.6,
        val_ratio=0.4
    )