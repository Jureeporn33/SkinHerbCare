#‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏≥ Label
import os
import cv2
import numpy as np

def imread_unicode(path, flags=cv2.IMREAD_UNCHANGED):
    with open(path, "rb") as f:
        data = np.frombuffer(f.read(), np.uint8)
    return cv2.imdecode(data, flags)

# ===== ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path =====
input_folder = r"D:\dataset\‡∏û‡∏ç‡∏≤‡∏¢‡∏≠\delete bg"
output_label_folder = r"D:\dataset\label"
output_preview_folder = r"D:\dataset\preview"

os.makedirs(output_label_folder, exist_ok=True)
os.makedirs(output_preview_folder, exist_ok=True)

# ===== ‡∏Ç‡∏ô‡∏≤‡∏î preview / final =====
FINAL_SIZE = 224  # ‡∏õ‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 224)

# ===== ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏•‡∏≤‡∏™‡∏à‡∏≤‡∏Å data.yaml =====
class_names = [
    'snake plant', '‡∏Ç‡∏°‡∏¥‡πâ‡∏ô', '‡∏Ç‡πà‡∏≤', '‡πÅ‡∏ï‡∏á‡∏Å‡∏ß‡∏≤', '‡∏ß‡πà‡∏≤‡∏ô‡∏´‡∏≤‡∏á‡∏à‡∏£‡πÄ‡∏Ç‡πâ',
    '‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏°', '‡∏û‡∏•‡∏π‡∏Ñ‡∏≤‡∏ß', '‡∏û‡∏•‡∏π', '‡∏ï‡∏≥‡∏•‡∏∂‡∏á', '‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏±‡∏á‡∏Ñ‡∏∏‡∏î‡πÅ‡∏´‡πâ‡∏á','‡∏Å‡∏£‡∏∞‡πÄ‡∏û‡∏£‡∏≤','‡πÇ‡∏´‡∏£‡∏û‡∏≤'
]

# ===== ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ class_id ===== (BGR) ‚Äî ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ alpha channel ‡πÉ‡∏ô‡∏ô‡∏µ‡πâ
CLASS_COLORS = {
    0: (255, 0, 0),         # Candyapple - ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
    1: (0, 255, 0),         # Namwa - ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
    2: (255, 0, 255),       # Namwadam - ‡∏°‡πà‡∏ß‡∏á
    3: (0, 200, 255),       # Homthong - ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
    4: (0, 0, 255),         # Nak - ‡πÅ‡∏î‡∏á
    5: (0, 165, 255),       # Thepphanom - ‡∏™‡πâ‡∏°
    6: (255, 102, 178),     # Kai - ‡∏°‡πà‡∏ß‡∏á‡∏≠‡∏°‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô
    7: (128, 128, 0),       # Lepchanggud - ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
    8: (255, 255, 0),       # Ngachang - ‡∏ü‡πâ‡∏≤
    9: (192, 192, 192),      # Huamao - ‡πÄ‡∏ó‡∏≤‡πÄ‡∏á‡∏¥‡∏ô
    10: (0, 128, 128),       # Khamin - ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡∏°‡∏ü‡πâ‡∏≤
    11: (128, 0, 128)        # Kha - ‡∏°‡πà‡∏ß‡∏á‡∏≠‡∏°‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
}

FORCE_CLASS_ID = 0  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£

image_files = [f for f in os.listdir(input_folder) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
total_files = len(image_files)

for idx, file in enumerate(image_files, start=1):
    print(f"üì∏ [{idx}/{total_files}] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {file}")

    img_path = os.path.join(input_folder, file)
    img = imread_unicode(img_path)  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

    if img is None:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ: {file} ‚Äî ‡∏Ç‡πâ‡∏≤‡∏°")
        continue

    if img.shape[2] == 4:
        bgr = img[:, :, :3]
        alpha = img[:, :, 3]
    else:
        bgr = img
        alpha = np.ones(bgr.shape[:2], dtype=np.uint8) * 255

    height, width = bgr.shape[:2]

    class_id = FORCE_CLASS_ID

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á mask ‡∏à‡∏≤‡∏Å alpha channel
    _, mask = cv2.threshold(alpha, 1, 255, cv2.THRESH_BINARY)
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    min_area = 500
    filtered_contours = [c for c in contours if cv2.contourArea(c) > min_area]

    if not filtered_contours:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏û‡∏≠‡πÉ‡∏ô: {file} ‚Äî ‡∏Ç‡πâ‡∏≤‡∏°")
        continue

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå label
    label_file = os.path.splitext(file)[0] + ".txt"
    with open(os.path.join(output_label_folder, label_file), "w") as f:
        for contour in filtered_contours:
            x, y, bw, bh = cv2.boundingRect(contour)
            x_center = (x + bw / 2) / width
            y_center = (y + bh / 2) / height
            w_norm = bw / width
            h_norm = bh / height
            f.write(f"{class_id} {x_center:.6f} {y_center:.6f} {w_norm:.6f} {h_norm:.6f}\n")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á preview image BGRA (‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™)
    preview_img = np.zeros((height, width, 4), dtype=np.uint8)
    preview_img[:, :, :3] = bgr
    preview_img[:, :, 3] = alpha

    # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏≤‡∏™ (‡πÉ‡∏ä‡πâ‡∏™‡∏µ BGR)
    color = CLASS_COLORS.get(class_id, (0, 255, 0))
    for contour in filtered_contours:
        x, y, bw, bh = cv2.boundingRect(contour)
        cv2.rectangle(preview_img, (x, y), (x + bw, y + bh), color + (255,), 2)  # ‡πÄ‡∏ï‡∏¥‡∏° alpha=255 ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≤‡∏¢ tuple
        # ‡∏ß‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏≤‡∏™‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™ ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô (BGR) + alpha=255
        cv2.putText(preview_img, class_names[class_id], (x + 5, max(y - 5, 15)),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, color + (255,), 1, cv2.LINE_AA)

    # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î preview
    scale = FINAL_SIZE / max(preview_img.shape[:2])
    new_w = int(preview_img.shape[1] * scale)
    new_h = int(preview_img.shape[0] * scale)
    resized_preview = cv2.resize(preview_img, (new_w, new_h), interpolation=cv2.INTER_AREA)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û final 224x224 ‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
    final_img = np.zeros((FINAL_SIZE, FINAL_SIZE, 4), dtype=np.uint8)
    x_offset = (FINAL_SIZE - new_w) // 2
    y_offset = (FINAL_SIZE - new_h) // 2
    final_img[y_offset:y_offset + new_h, x_offset:x_offset + new_w] = resized_preview

    preview_file = os.path.splitext(file)[0] + ".png"
    cv2.imwrite(os.path.join(output_preview_folder, preview_file), final_img)

    print(f"‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {file}")

print("\nüéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πâ‡∏≤‡∏ö: ‡∏™‡∏£‡πâ‡∏≤‡∏á preview ‡∏†‡∏≤‡∏û‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏≤‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! üéØ")
