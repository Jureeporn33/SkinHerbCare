# ===============================
# YOLOv8 Classification Training + Summary Report
# ===============================
# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Python 3.x + ultralytics
# ‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô VS Code ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢

import os
import shutil
import random
from pathlib import Path
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from ultralytics import YOLO
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

# ------------------------------
# STEP 0: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ path dataset
# ------------------------------
# ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡∏ß‡∏°‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
input_dir = Path(r"D:\herbSkin_Project66\Dataset\images_all")   # <-- ‡πÅ‡∏Å‡πâ path ‡∏ï‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
output_dir = Path(r"D:\herbSkin_Project66\Dataset\herbV.2")  

# ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô train/val/test
train_ratio, val_ratio, test_ratio = 0.7, 0.2, 0.1

# ------------------------------
# STEP 1: ‡πÅ‡∏ö‡πà‡∏á dataset ‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
# ------------------------------
# ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
images = list(input_dir.glob("*.jpg")) + \
         list(input_dir.glob("*.png")) + \
         list(input_dir.glob("*.jpeg"))

if len(images) == 0:
    raise ValueError(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {input_dir}")

# ‡πÅ‡∏¢‡∏Å class ‡∏à‡∏≤‡∏Å prefix ‡∏Ç‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå (‡πÄ‡∏ä‡πà‡∏ô "‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏±‡∏á‡∏Ñ‡∏∏‡∏î_001.jpg" ‚Üí class = "‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏±‡∏á‡∏Ñ‡∏∏‡∏î")
class_dict = {}
for img in images:
    class_name = img.stem.split("_")[0]
    class_dict.setdefault(class_name, []).append(img)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå train/val/test
for split in ["train", "val", "test"]:
    (output_dir / split).mkdir(parents=True, exist_ok=True)

# ‡πÅ‡∏ö‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å
for class_name, file_list in class_dict.items():
    random.shuffle(file_list)
    n_total = len(file_list)
    n_train = int(n_total * train_ratio)
    n_val   = int(n_total * val_ratio)

    train_files = file_list[:n_train]
    val_files   = file_list[n_train:n_train+n_val]
    test_files  = file_list[n_train+n_val:]

    def copy_files(files, split):
        split_dir = output_dir / split / class_name
        split_dir.mkdir(parents=True, exist_ok=True)
        for f in files:
            shutil.copy(f, split_dir / f.name)

    copy_files(train_files, "train")
    copy_files(val_files, "val")
    copy_files(test_files, "test")

print("‚úÖ Dataset ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏≤‡∏™‡πÅ‡∏•‡πâ‡∏ß")
print(f"‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(class_dict)} ‡∏Ñ‡∏•‡∏≤‡∏™: {list(class_dict.keys())}")

# ------------------------------
# STEP 2: ‡πÄ‡∏ó‡∏£‡∏ô YOLOv8 Classification
# ------------------------------
model = YOLO("yolov8n-cls.pt")  # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• pretrained

model.train(
    data=str(output_dir),   # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå dataset ‡∏´‡∏•‡∏±‡∏Å
    epochs=100,              # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡πÄ‡∏ó‡∏£‡∏ô
    imgsz=640,              # ‡∏Ç‡∏ô‡∏≤‡∏î input image
    batch=64,               # batch size
    workers=4,              # DataLoader workers
    device="cpu"            # ‡πÉ‡∏ä‡πâ GPU ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÄ‡∏ä‡πà‡∏ô device="0"
)

# ------------------------------
# STEP 3: ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏ö‡∏ô test set
# ------------------------------
metrics = model.val(data=str(output_dir / "test"))
print("üìä Metrics:", metrics)

# ------------------------------
# STEP 4: ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°
# ------------------------------
log_path = Path(model.trainer.save_dir) / "results.csv"
df = pd.read_csv(log_path)

# --- Loss ---
plt.figure(figsize=(10,5))
plt.plot(df["epoch"], df["train/loss"], label="Train Loss", color="blue")
plt.plot(df["epoch"], df["val/loss"], label="Val Loss", color="orange")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.title("Training & Validation Loss")
plt.legend()
plt.grid(True)
plt.show()

# --- Accuracy ---
plt.figure(figsize=(10,5))
plt.plot(df["epoch"], df["metrics/accuracy_top1"], label="Top-1 Accuracy", color="green")
plt.plot(df["epoch"], df["metrics/accuracy_top5"], label="Top-5 Accuracy", color="red")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.title("Validation Accuracy")
plt.legend()
plt.grid(True)
plt.show()

# --- Precision / Recall / F1 ---
if "metrics/precision" in df.columns:
    plt.figure(figsize=(10,5))
    plt.plot(df["epoch"], df["metrics/precision"], label="Precision", color="purple")
    plt.plot(df["epoch"], df["metrics/recall"], label="Recall", color="brown")
    plt.plot(df["epoch"], df["metrics/f1"], label="F1-score", color="teal")
    plt.xlabel("Epoch")
    plt.ylabel("Score")
    plt.title("Precision, Recall, F1 per Epoch")
    plt.legend()
    plt.grid(True)
    plt.show()

# --- Confusion Matrix ---
print("üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á Confusion Matrix...")
best_model = YOLO(str(Path(model.trainer.save_dir) / "weights/best.pt"))
pred_results = best_model.val(data=str(output_dir / "test"), save=False, plots=False)

# y_true ‡πÅ‡∏•‡∏∞ y_pred ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° structure ‡∏ó‡∏µ‡πà ultralytics ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤
# ‡∏ñ‡πâ‡∏≤ val() ‡πÑ‡∏°‡πà return probs ‡∏ï‡∏£‡∏á ‡πÜ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ä‡πâ predict loop
try:
    y_true = pred_results.results[0].dataset.labels
    y_pred = pred_results.results[0].probs.argmax(1).cpu().numpy()

    cm = confusion_matrix(y_true, y_pred, labels=range(len(class_dict)))
    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=list(class_dict.keys()))
    fig, ax = plt.subplots(figsize=(10,10))
    disp.plot(ax=ax, cmap="Blues", xticks_rotation=45)
    plt.title("Confusion Matrix (Test set)")
    plt.show()

    # --- Class-wise Accuracy ---
    class_acc = (cm.diagonal() / cm.sum(axis=1)) * 100
    plt.figure(figsize=(12,6))
    plt.bar(class_dict.keys(), class_acc, color="skyblue")
    plt.xticks(rotation=45, ha="right")
    plt.ylabel("Accuracy (%)")
    plt.title("Accuracy per Class (Test set)")
    plt.grid(axis="y")
    plt.show()
except Exception as e:
    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Confusion Matrix ‡πÑ‡∏î‡πâ:", e)

# ------------------------------
# STEP 5: ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà
# ------------------------------
img_path = r"C:\Dataset\sample_image.jpg"  # <-- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô path ‡∏†‡∏≤‡∏û‡∏ó‡∏î‡∏™‡∏≠‡∏ö
results = best_model.predict(img_path)
results.show()
